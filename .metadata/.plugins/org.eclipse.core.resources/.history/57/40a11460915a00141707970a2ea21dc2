import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.Security;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.apache.commons.codec.binary.Base64;

public class SarahGarbledCircuit {
	int nSubCircuits = 5;
	static int bobBit,aliceBit;
	static HashMap<String, KeyPair> hm = new HashMap<String, KeyPair>();
	static HashMap<String, Cipher> gc = new HashMap<String, Cipher>();
	static Cipher aesCipher;
	static byte[][] garbLineChosen = new byte[2][];
	static Key alicePublicKey,alicePrivateKey;
	static int n;
	static Random random = new Random();
	static int r0,r1,rk,v,msg0,msg1;
	
	static KeyPair makeKey() throws NoSuchAlgorithmException{
		//http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml
		KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
		kpg.initialize(512);
		KeyPair kp = kpg.generateKeyPair();
		return kp;

	}
	//I put the keys in a hashmap
	static void aliceSixKeys() throws NoSuchAlgorithmException{
			hm.put("kx0", makeKey());
			hm.put("kx1", makeKey());
			hm.put("ky0", makeKey());
			hm.put("ky1", makeKey());
			hm.put("kz0", makeKey());
			hm.put("kz1", makeKey());
			System.out.println("Two keys per wire created");
		}
		//make double encryptions and wrap the key and save the Garbled circuit in a hashmap.
		static void doubleEncryption(HashMap<String, KeyPair> hash) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, IOException{
			byte[] firstLine;
			Cipher aesCipher00 = Cipher.getInstance("RSA");
			aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("ky0").getPublic());
			firstLine = aesCipher00.doFinal();
			aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("kx0").getPublic());
			firstLine = aesCipher00.doFinal();
			aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("kz0").getPrivate());
			//aesCipher00.wrap(hash.get("kz0").getPrivate());
			firstLine = aesCipher00.doFinal();
			firstLine = Base64.encodeBase64(firstLine);
			byte[] secondLine;
			Cipher aesCipher01 = Cipher.getInstance("RSA");
			aesCipher01.init(Cipher.ENCRYPT_MODE, hash.get("kx0").getPublic());
			secondLine = aesCipher01.doFinal();
			aesCipher01.init(Cipher.ENCRYPT_MODE, hash.get("ky1").getPublic());
			secondLine = aesCipher01.doFinal();
			aesCipher01.init(Cipher.ENCRYPT_MODE, hash.get("kz1").getPublic());
			secondLine = aesCipher01.doFinal();
			secondLine = Base64.encodeBase64(secondLine);
			byte[] thirdLine;
			Cipher aesCipher10 = Cipher.getInstance("RSA");
			aesCipher10.init(Cipher.ENCRYPT_MODE, hash.get("kx1").getPublic());
			thirdLine = aesCipher10.doFinal();
			aesCipher10.init(Cipher.ENCRYPT_MODE, hash.get("ky0").getPublic());
			thirdLine = aesCipher10.doFinal();
			aesCipher10.init(Cipher.ENCRYPT_MODE, hash.get("kz1").getPublic());
			thirdLine = aesCipher10.doFinal();
			thirdLine = Base64.encodeBase64(thirdLine);
			byte[] forthLine;
			Cipher aesCipher11 = Cipher.getInstance("RSA");
			aesCipher11.init(Cipher.ENCRYPT_MODE, hash.get("kx1").getPublic());
			forthLine = aesCipher11.doFinal();
			aesCipher11.init(Cipher.ENCRYPT_MODE, hash.get("ky1").getPublic());
			forthLine = aesCipher11.doFinal();
			aesCipher11.init(Cipher.ENCRYPT_MODE, hash.get("kz0").getPublic());
			forthLine = aesCipher11.doFinal();
			forthLine = Base64.encodeBase64(forthLine);
			System.out.println("Garbled Circuit is created.");

			//Alice chose two line to send 
			//It depends on what is the Alice bit.
			if(aliceBit == 1){
				//Lines with x = 1 need to be sent in bytes
				garbLineChosen[0] = thirdLine;
				garbLineChosen[1] = forthLine;
				System.out.println("Alice bit is 1 so third and forth line of garbled circuit is sent to Bob.");

				
			}
			else if(aliceBit == 0){
				//Lines with x = 0 need to be sent in bytes
				garbLineChosen[0] = firstLine;
				garbLineChosen[1] = secondLine;
				System.out.println("Alice bit is 0 so first and second line of garbled circuit is sent to Bob.");
			}
		}

		//Make Alice keyPair, random values and n.
		static void ot1 (byte[][] lines) throws NoSuchAlgorithmException{
			System.out.println("Oblivious Transfer part:");
			System.out.println("Generate a public and private key for Alice for furthur computations.");
			System.out.println("Alice generates 2 random values (r0,r1) and send it to bob.");
			//p = 3, q = 5 n =15
			n = 15;
			KeyPair aliceKey = makeKey();
			alicePublicKey = aliceKey.getPublic();
			alicePrivateKey = aliceKey.getPrivate();
			r0 = random.nextInt();
			r1 = random.nextInt();
		}
		//make k.
		static int ot2 (byte[][] lines){
			//rk = b[2];
			System.out.println("Bob generates random value k and calculate v depending on his input bit");
			rk = random.nextInt();
			//if bob has bit 0 then r0 and so k = 0
			if(bobBit == 0){
				v = (r0 % n);
			}
			else if (bobBit == 1){
				v = ((r1 + 1) % n);
			}
			System.out.println("Bob send v to Alice");
			return v;
		}
		//Alice creates 2 msgs
		static void ot3 (int vOfBob){
			
			 msg0 = garbLineChosen[0].hashCode() + (int) (Math.pow(vOfBob-r0, alicePrivateKey.hashCode()) % n);
			 msg1 = garbLineChosen[1].hashCode() + (int) (Math.pow(vOfBob-r1, alicePrivateKey.hashCode()) % n);
			 System.out.println("Alice creates 2 msgs using value v, r0, r1 and her private key and send it to bob");
		}
		//Bob gets two msg and now he can chose the right one and return it
		static int ot4(int m0, int m1){
			System.out.println("Bob receives the msgs and choose one depending on his bit");
			if(bobBit == 0){
				int kb0 = m0-rk;
				System.out.println("Bob choose kb0");
				return kb0;
			}
			else if (bobBit == 1){
				int kb1 = m1-rk;
				System.out.println("Bob choose kb1");
				return kb1;
			}
			return 0;
		}
		public static void main (String args[]) throws Exception{
			String s,t;
			Scanner in = new Scanner(System.in);
		    System.out.println("Please enter Alice bit");
		    s = in.nextLine();
		    System.out.println("The Alice bit is "+s);
		    System.out.println("Please enter Bob bit");
		    t = in.nextLine();
		    System.out.println("The Bob bit is "+t);
		    aliceBit =Integer.parseInt(s);
		    bobBit =Integer.parseInt(t);
		    aliceSixKeys();
		    doubleEncryption(hm);
		    ot1(garbLineChosen);
		    System.out.println(alicePublicKey.getFormat());
		    ot3(ot2(garbLineChosen));
		    ot4(msg0,msg1);

		}


}
