import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.Security;
import java.util.HashMap;
import java.util.Scanner;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;


public class SarahGarbledCircuit {
	int nSubCircuits = 5;
	static int bit;
	static HashMap<String, KeyPair> hm = new HashMap<String, KeyPair>();
	static HashMap<String, Cipher> gc = new HashMap<String, Cipher>();
	static Cipher aesCipher;
	
	//make a public key.
	//Public key encryption. A technology that allows two parties 
	//to share secret messages without prior agreement on secret keys
	static KeyPair makeKey() throws NoSuchAlgorithmException{
		//http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml
		KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
		//needs to be at least 512
		kpg.initialize(512);
		KeyPair kp = kpg.generateKeyPair();
		//Key publicKey = kp.getPublic();
		//Key privateKey = kp.getPrivate();
		return kp;

	}
	//I put the keys in a hashmap
	static void aliceSixKeys() throws NoSuchAlgorithmException{
			hm.put("kx0", makeKey());
			hm.put("kx1", makeKey());
			hm.put("ky0", makeKey());
			hm.put("ky1", makeKey());
			hm.put("kz0", makeKey());
			hm.put("kz1", makeKey());
		}
		//make double encryptions and wrap the key and save the Garbled circuit in a hashmap.
		static void doubleEncryption(HashMap<String, KeyPair> hash) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{
			byte[] bytes;
			Cipher aesCipher00 = Cipher.getInstance("RSA");
			aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("ky0").getPublic());
			bytes = aesCipher00.doFinal();
			aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("kx0").getPublic());
			bytes = aesCipher00.doFinal();
			aesCipher00.init(Cipher.WRAP_MODE, hash.get("kz0").getPublic());
			aesCipher00.wrap(hash.get("kz0").getPublic());
			bytes = aesCipher00.doFinal();
			// byte[] cipherText = aesCipher00.doFinal();
			//aesCipher00.update(cipherText);
			//aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("kx0").getPublic());
			//aesCipher00.init(Cipher.ENCRYPT_MODE, hash.get("kz0").getPublic());
			//aesCipher00.doFinal();
			/*Cipher aesCipher01 = Cipher.getInstance("AES");
			aesCipher01.init(Cipher.ENCRYPT_MODE, hash.get("kx0").getPublic());
			aesCipher01.init(Cipher.ENCRYPT_MODE, hash.get("ky1").getPublic());
			aesCipher01.wrap(hash.get("kz1").getPublic());
			Cipher aesCipher10 = Cipher.getInstance("AES");
			aesCipher10.init(Cipher.ENCRYPT_MODE, hash.get("kx1").getPublic());
			aesCipher10.init(Cipher.ENCRYPT_MODE, hash.get("ky0").getPublic());
			aesCipher10.wrap(hash.get("kz1").getPublic());
			Cipher aesCipher11 = Cipher.getInstance("AES");
			aesCipher11.init(Cipher.ENCRYPT_MODE, hash.get("kx1").getPublic());
			aesCipher11.init(Cipher.ENCRYPT_MODE, hash.get("ky1").getPublic());
			aesCipher11.wrap(hash.get("kz0").getPublic());
			gc.put("line00", aesCipher00);
			gc.put("line01", aesCipher01);
			gc.put("line10", aesCipher10);
			gc.put("line11", aesCipher11);*/
		}
		public static void main (String args[]) throws Exception{
			String s;
			Scanner in = new Scanner(System.in);
		    System.out.println("Please enter Alice bit");
		    s = in.nextLine();
		    System.out.println("The Alice bit is "+s);
		    bit =Integer.parseInt(s);
		    aliceSixKeys();
		    doubleEncryption(hm);
		    //System.out.println(hm.get("kz1").getPublic().toString());
		  //  System.out.println(hm.toString());
		   // System.out.println(hm.get("ky0").getPublic());
		   
		}


}
